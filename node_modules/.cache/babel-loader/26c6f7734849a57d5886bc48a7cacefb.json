{"ast":null,"code":"var _jsxFileName = \"/Users/skylar/study/React/emotion_diary/src/components/DiaryEditor.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useRef, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { DiaryDispatchContext } from './../App';\nimport Button from './Button';\nimport EmotionItem from './EmotionItem';\nimport Header from './Header';\nimport { getStringDate, emotionList } from '../util/date';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst env = process.env;\nenv.PUBLIC_URL = env.PUBLIC_URL || ''; //isEdit, originData는 Edit 컴포넌트에서 보낸 props.\n\nconst DiaryEditor = _ref => {\n  _s();\n\n  let {\n    isEdit,\n    originData\n  } = _ref;\n  const navigate = useNavigate();\n  const contentRef = useRef();\n  const [date, setDate] = useState(getStringDate(new Date())); //emotionList의 emotion_id: 3을 초기값으로 준다.\n\n  const [emotion, setEmotion] = useState(3);\n  const [content, setContent] = useState();\n  const {\n    onCreate,\n    onEdit\n  } = useContext(DiaryDispatchContext);\n\n  const pagebackHandler = () => {\n    navigate(-1);\n  };\n\n  const emotionClickHandler = emotion => {\n    setEmotion(emotion);\n  };\n\n  const onChangeHandler = event => {\n    setContent(event.target.value);\n  };\n\n  const submitHandler = () => {\n    if (!content) {\n      contentRef.current.focus();\n      return;\n    }\n\n    if (window.confirm(isEdit ? '수정된 일기를 저장할까요?' : '일기를 저장할까요?')) {\n      if (!isEdit) {\n        // isEdit이 아니면 onCreate()을 수행한다.\n        onCreate(date, content, emotion);\n      } else {\n        // isEdit이면 onEdit()을 수행한다.\n        // useContext()로 주입된 src/App.js의 함수 onEdit의 parameter targetId는 argument originData.id로 받는다.\n        onEdit(originData.id, date, content, emotion);\n      }\n    }\n\n    navigate('/', {\n      replace: true\n    });\n  }; //page/Editor 컴포넌트에서 넘겨받은 props처리\n\n\n  useEffect(() => {\n    if (isEdit) {\n      setDate(getStringDate(new Date(originData.date)));\n      setEmotion(originData.emotion);\n      setContent(originData.content);\n    }\n  }, [isEdit, originData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DiaryEditor\",\n    children: [/*#__PURE__*/_jsxDEV(Header //\n    , {\n      headText: isEdit ? '일기 수정하기' : '새로운 일기',\n      leftChild: /*#__PURE__*/_jsxDEV(Button, {\n        text: '< 뒤로가기',\n        onClick: pagebackHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 20\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"\\uB0A0\\uC9DC \\uC120\\uD0DD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input_box\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"input_date\",\n            value: date,\n            type: \"date\",\n            onChange: e => setDate(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"\\uB098\\uC758 \\uAC10\\uC815\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input_box emotion_list_wrap\",\n          children: emotionList.map(it => /*#__PURE__*/_jsxDEV(EmotionItem //\n          , { ...it,\n            clickEvent: emotionClickHandler,\n            isSelected: it.emotion_id === emotion\n          }, it.emotion_id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"\\uC624\\uB298\\uC758 \\uC77C\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input_box text_wrapper\",\n          children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n            //\n            ref: contentRef,\n            value: content,\n            onChange: onChangeHandler,\n            placeholder: \"\\uC5B4\\uB5A4 \\uD558\\uB8E8\\uB97C \\uBCF4\\uB0C8\\uB098\\uC694?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control_button_wrap\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            text: '작성 취소',\n            type: 'negative',\n            onClick: pagebackHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            text: '일기 저장',\n            type: 'positive',\n            onClick: submitHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DiaryEditor, \"rGMHYvxs+WQ7FqTcbCuJAlJoGS0=\", false, function () {\n  return [useNavigate];\n});\n\n_c = DiaryEditor;\nexport default DiaryEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"DiaryEditor\");","map":{"version":3,"sources":["/Users/skylar/study/React/emotion_diary/src/components/DiaryEditor.jsx"],"names":["React","useState","useContext","useRef","useEffect","useNavigate","DiaryDispatchContext","Button","EmotionItem","Header","getStringDate","emotionList","env","process","PUBLIC_URL","DiaryEditor","isEdit","originData","navigate","contentRef","date","setDate","Date","emotion","setEmotion","content","setContent","onCreate","onEdit","pagebackHandler","emotionClickHandler","onChangeHandler","event","target","value","submitHandler","current","focus","window","confirm","id","replace","e","map","it","emotion_id"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useRef, useEffect } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { DiaryDispatchContext } from './../App'\nimport Button from './Button'\nimport EmotionItem from './EmotionItem'\nimport Header from './Header'\nimport { getStringDate, emotionList } from '../util/date'\n\nconst env = process.env\nenv.PUBLIC_URL = env.PUBLIC_URL || ''\n\n//isEdit, originData는 Edit 컴포넌트에서 보낸 props.\nconst DiaryEditor = ({ isEdit, originData }) => {\n  const navigate = useNavigate()\n\n  const contentRef = useRef()\n\n  const [date, setDate] = useState(getStringDate(new Date()))\n\n  //emotionList의 emotion_id: 3을 초기값으로 준다.\n  const [emotion, setEmotion] = useState(3)\n  const [content, setContent] = useState()\n\n  const { onCreate, onEdit } = useContext(DiaryDispatchContext)\n\n  const pagebackHandler = () => {\n    navigate(-1)\n  }\n\n  const emotionClickHandler = (emotion) => {\n    setEmotion(emotion)\n  }\n\n  const onChangeHandler = (event) => {\n    setContent(event.target.value)\n  }\n\n  const submitHandler = () => {\n    if (!content) {\n      contentRef.current.focus()\n      return\n    }\n\n    if (window.confirm(isEdit ? '수정된 일기를 저장할까요?' : '일기를 저장할까요?')) {\n      if (!isEdit) {\n        // isEdit이 아니면 onCreate()을 수행한다.\n        onCreate(date, content, emotion)\n      } else {\n        // isEdit이면 onEdit()을 수행한다.\n        // useContext()로 주입된 src/App.js의 함수 onEdit의 parameter targetId는 argument originData.id로 받는다.\n        onEdit(originData.id, date, content, emotion)\n      }\n    }\n\n    navigate('/', { replace: true })\n  }\n\n  //page/Editor 컴포넌트에서 넘겨받은 props처리\n  useEffect(() => {\n    if (isEdit) {\n      setDate(getStringDate(new Date(originData.date)))\n      setEmotion(originData.emotion)\n      setContent(originData.content)\n    }\n  }, [isEdit, originData])\n\n  return (\n    <div className=\"DiaryEditor\">\n      <Header //\n        headText={isEdit ? '일기 수정하기' : '새로운 일기'}\n        leftChild={<Button text={'< 뒤로가기'} onClick={pagebackHandler} />}\n      />\n      <div>\n        <section>\n          <h4>날짜 선택</h4>\n          <div className=\"input_box\">\n            <input className=\"input_date\" value={date} type=\"date\" onChange={(e) => setDate(e.target.value)} />\n          </div>\n        </section>\n        <section>\n          <h4>나의 감정</h4>\n          <div className=\"input_box emotion_list_wrap\">\n            {emotionList.map((it) => (\n              <EmotionItem //\n                key={it.emotion_id}\n                {...it}\n                clickEvent={emotionClickHandler}\n                isSelected={it.emotion_id === emotion}\n              />\n            ))}\n          </div>\n        </section>\n        <section>\n          <h4>오늘의 일기</h4>\n          <div className=\"input_box text_wrapper\">\n            <textarea //\n              ref={contentRef}\n              value={content}\n              onChange={onChangeHandler}\n              placeholder=\"어떤 하루를 보냈나요?\"\n            />\n          </div>\n        </section>\n        <section>\n          <div className=\"control_button_wrap\">\n            <Button text={'작성 취소'} type={'negative'} onClick={pagebackHandler} />\n            <Button text={'일기 저장'} type={'positive'} onClick={submitHandler} />\n          </div>\n        </section>\n      </div>\n    </div>\n  )\n}\n\nexport default DiaryEditor\n"]},"metadata":{},"sourceType":"module"}