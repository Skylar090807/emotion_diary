{"ast":null,"code":"var _jsxFileName = \"/Users/skylar/study/React/emotion_diary/src/components/DiaryList.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ControlMenu = _ref => {\n  let {\n    value,\n    onChange,\n    optionList\n  } = _ref;\n  //value prop: ControlMenu가 렌더링 하는 select가 어떤 것을 선택하고 있는지 알려주는 역할.\n  //onChange prop: select가 변경되었을 때 바꿀 기능을 하는 함수.\n  //optionList prop: select 태그 안의 options.\n  return /*#__PURE__*/_jsxDEV(\"select\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 10\n  }, this);\n};\n\n_c = ControlMenu;\n\nconst DiaryList = _ref2 => {\n  _s();\n\n  let {\n    diaryList\n  } = _ref2;\n  //정렬 기준이 되는 state\n  const [sortType, setSortType] = useState('latest');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ControlMenu, {\n      value: sortType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), diaryList.map(it => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: it.content\n    }, it.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DiaryList, \"r7g91DDq+2vAPeXEapT4nb61jPA=\");\n\n_c2 = DiaryList;\nDiaryList.defaultProps = {\n  diaryList: []\n};\nexport default DiaryList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ControlMenu\");\n$RefreshReg$(_c2, \"DiaryList\");","map":{"version":3,"sources":["/Users/skylar/study/React/emotion_diary/src/components/DiaryList.jsx"],"names":["React","useState","ControlMenu","value","onChange","optionList","DiaryList","diaryList","sortType","setSortType","map","it","content","id","defaultProps"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,WAAW,GAAG,QAAqC;AAAA,MAApC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,GAAoC;AACvD;AACA;AACA;AACA,sBAAO;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CALD;;KAAMH,W;;AAON,MAAMI,SAAS,GAAG,SAAmB;AAAA;;AAAA,MAAlB;AAAEC,IAAAA;AAAF,GAAkB;AACnC;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,QAAD,CAAxC;AAEA,sBACE;AAAA,4BAEE,QAAC,WAAD;AAAa,MAAA,KAAK,EAAEO;AAApB;AAAA;AAAA;AAAA;AAAA,YAFF,EAGGD,SAAS,CAACG,GAAV,CAAeC,EAAD,iBACb;AAAA,gBAAkBA,EAAE,CAACC;AAArB,OAAUD,EAAE,CAACE,EAAb;AAAA;AAAA;AAAA;AAAA,YADD,CAHH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAbD;;GAAMP,S;;MAAAA,S;AAeNA,SAAS,CAACQ,YAAV,GAAyB;AACvBP,EAAAA,SAAS,EAAE;AADY,CAAzB;AAGA,eAAeD,SAAf","sourcesContent":["import React from 'react'\nimport { useState } from 'react'\n\nconst ControlMenu = ({ value, onChange, optionList }) => {\n  //value prop: ControlMenu가 렌더링 하는 select가 어떤 것을 선택하고 있는지 알려주는 역할.\n  //onChange prop: select가 변경되었을 때 바꿀 기능을 하는 함수.\n  //optionList prop: select 태그 안의 options.\n  return <select></select>\n}\n\nconst DiaryList = ({ diaryList }) => {\n  //정렬 기준이 되는 state\n  const [sortType, setSortType] = useState('latest')\n\n  return (\n    <div>\n      {/* controlMenu의 역할은 정렬기준이 되는 sortType을 변화시키는 select의 역할을 하기때문에 value에 sortType을 내려준다. */}\n      <ControlMenu value={sortType} />\n      {diaryList.map((it) => (\n        <div key={it.id}>{it.content}</div>\n      ))}\n    </div>\n  )\n}\n\nDiaryList.defaultProps = {\n  diaryList: [],\n}\nexport default DiaryList\n"]},"metadata":{},"sourceType":"module"}