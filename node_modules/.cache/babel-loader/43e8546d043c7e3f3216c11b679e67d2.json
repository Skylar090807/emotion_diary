{"ast":null,"code":"var _jsxFileName = \"/Users/skylar/study/React/emotion_diary/src/pages/Edit.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { DiaryStateContext } from '../App';\nimport DiaryEditor from '../components/DiaryEditor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Edit = () => {\n  _s();\n\n  const [originData, setOriginData] = useState(); //Page Moving useNavigate()\n\n  const navigate = useNavigate();\n  const {\n    id\n  } = useParams();\n  console.log(id);\n  const diaryList = useContext(DiaryStateContext);\n  console.log('useContext() diaryList', diaryList); // id를 기준으로 해당 id에 맞는 diaryList의 data를 꺼내온다.\n  // useEffect를 사용해 Edit component가 mount될 때 수행하도록 한다.\n\n  useEffect(() => {\n    if (diaryList.length >= 1) {\n      const targetDiary = diaryList.find( //\n      it => Number(it.id) === parseInt(id));\n      console.log('targetDiary', targetDiary); // targetDiary는 truthy.\n\n      if (targetDiary) {\n        setOriginData(targetDiary);\n      } else {\n        //replace:true 는 navigate()로 해당 경로로 page 이동 시킨 뒤 그 경로로 replace해 뒤로가기가 되지 않는다.\n        alert('존재하지 않는 일기입니다. 메인 페이지로 돌아갑니다. ');\n        navigate('/', {\n          replace: true\n        });\n      }\n    }\n  }, [id, diaryList]); //useState() originData는 useEffect()에서 setOriginData(targetDiary)를 통해\n  //targetDiary를 추적하고 있다.\n\n  console.log('originData', originData); //originData가 있으면 <DiaryEditor/> 컴포넌트를 보여준다.\n  //props를 전달하지 않으면 origin data가 적용되지 않으므로 props를 전달해 DiaryEditor가 해당 props들을\n  //처리하도록 한다.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: originData && /*#__PURE__*/_jsxDEV(DiaryEditor, {\n      isEdit: true,\n      originData: originData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 30\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Edit, \"CpLijJUIhriDzFVuvZtW6ZInBvM=\", false, function () {\n  return [useNavigate, useParams];\n});\n\n_c = Edit;\nexport default Edit;\n\nvar _c;\n\n$RefreshReg$(_c, \"Edit\");","map":{"version":3,"sources":["/Users/skylar/study/React/emotion_diary/src/pages/Edit.jsx"],"names":["React","useContext","useEffect","useState","useNavigate","useParams","DiaryStateContext","DiaryEditor","Edit","originData","setOriginData","navigate","id","console","log","diaryList","length","targetDiary","find","it","Number","parseInt","alert","replace"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,kBAAvC;AACA,SAASC,iBAAT,QAAkC,QAAlC;AACA,OAAOC,WAAP,MAAwB,2BAAxB;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,EAA5C,CADiB,CAGjB;;AACA,QAAMQ,QAAQ,GAAGP,WAAW,EAA5B;AAEA,QAAM;AAAEQ,IAAAA;AAAF,MAASP,SAAS,EAAxB;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AAEA,QAAMG,SAAS,GAAGd,UAAU,CAACK,iBAAD,CAA5B;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCC,SAAtC,EAViB,CAYjB;AACA;;AACAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,SAAS,CAACC,MAAV,IAAoB,CAAxB,EAA2B;AACzB,YAAMC,WAAW,GAAGF,SAAS,CAACG,IAAV,EAClB;AACCC,MAAAA,EAAD,IAAQC,MAAM,CAACD,EAAE,CAACP,EAAJ,CAAN,KAAkBS,QAAQ,CAACT,EAAD,CAFhB,CAApB;AAIAC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BG,WAA3B,EALyB,CAOzB;;AACA,UAAIA,WAAJ,EAAiB;AACfP,QAAAA,aAAa,CAACO,WAAD,CAAb;AACD,OAFD,MAEO;AACL;AACAK,QAAAA,KAAK,CAAC,gCAAD,CAAL;AACAX,QAAAA,QAAQ,CAAC,GAAD,EAAM;AAAEY,UAAAA,OAAO,EAAE;AAAX,SAAN,CAAR;AACD;AACF;AACF,GAjBQ,EAiBN,CAACX,EAAD,EAAKG,SAAL,CAjBM,CAAT,CAdiB,CAiCjB;AACA;;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BL,UAA1B,EAnCiB,CAqCjB;AACA;AACA;;AACA,sBAAO;AAAA,cAAMA,UAAU,iBAAI,QAAC,WAAD;AAAa,MAAA,MAAM,EAAE,IAArB;AAA2B,MAAA,UAAU,EAAEA;AAAvC;AAAA;AAAA;AAAA;AAAA;AAApB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAzCD;;GAAMD,I;UAIaJ,W,EAEFC,S;;;KANXG,I;AA2CN,eAAeA,IAAf","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport { DiaryStateContext } from '../App'\nimport DiaryEditor from '../components/DiaryEditor'\n\nconst Edit = () => {\n  const [originData, setOriginData] = useState()\n\n  //Page Moving useNavigate()\n  const navigate = useNavigate()\n\n  const { id } = useParams()\n  console.log(id)\n\n  const diaryList = useContext(DiaryStateContext)\n  console.log('useContext() diaryList', diaryList)\n\n  // id를 기준으로 해당 id에 맞는 diaryList의 data를 꺼내온다.\n  // useEffect를 사용해 Edit component가 mount될 때 수행하도록 한다.\n  useEffect(() => {\n    if (diaryList.length >= 1) {\n      const targetDiary = diaryList.find(\n        //\n        (it) => Number(it.id) === parseInt(id),\n      )\n      console.log('targetDiary', targetDiary)\n\n      // targetDiary는 truthy.\n      if (targetDiary) {\n        setOriginData(targetDiary)\n      } else {\n        //replace:true 는 navigate()로 해당 경로로 page 이동 시킨 뒤 그 경로로 replace해 뒤로가기가 되지 않는다.\n        alert('존재하지 않는 일기입니다. 메인 페이지로 돌아갑니다. ')\n        navigate('/', { replace: true })\n      }\n    }\n  }, [id, diaryList])\n\n  //useState() originData는 useEffect()에서 setOriginData(targetDiary)를 통해\n  //targetDiary를 추적하고 있다.\n  console.log('originData', originData)\n\n  //originData가 있으면 <DiaryEditor/> 컴포넌트를 보여준다.\n  //props를 전달하지 않으면 origin data가 적용되지 않으므로 props를 전달해 DiaryEditor가 해당 props들을\n  //처리하도록 한다.\n  return <div>{originData && <DiaryEditor isEdit={true} originData={originData} />}</div>\n}\n\nexport default Edit\n"]},"metadata":{},"sourceType":"module"}