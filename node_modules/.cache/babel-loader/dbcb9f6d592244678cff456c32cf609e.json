{"ast":null,"code":"var _jsxFileName = \"/Users/skylar/study/React/emotion_diary/src/components/DiaryList.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Button from './Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sortOptionList = [{\n  value: 'latest',\n  name: '최신 일기'\n}, {\n  value: 'oldest',\n  name: '오랜 일기'\n}];\nconst emotionFilterOptionList = [{\n  value: 'all',\n  name: '모든 감정'\n}, {\n  value: 'good',\n  name: '좋은 감정'\n}, {\n  value: 'bad',\n  name: '나쁜 감정'\n}];\n\nconst ControlMenu = _ref => {\n  let {\n    value,\n    onChange,\n    optionList\n  } = _ref;\n  //value prop: ControlMenu가 렌더링 하는 select가 어떤 것을 선택하고 있는지 알려주는 역할.\n  //onChange prop: select가 변경되었을 때 바꿀 기능을 하는 함수.\n  //optionList prop: select 태그 안의 options.\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    className: \"ControlMenu\",\n    value: value,\n    onChange: e => onChange(e.target.value),\n    children: optionList.map((it, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: it.value,\n      children: it.name\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}; //diaryList prop은 Home.jsx에서 useContext로 받아 온 data를 대입해준 것.\n\n\n_c = ControlMenu;\n\nconst DiaryList = _ref2 => {\n  _s();\n\n  let {\n    diaryList\n  } = _ref2;\n  const navigate = useNavigate(); //정렬 기준이 되는 state\n\n  const [sortType, setSortType] = useState('latest');\n  const [emotionFilter, setEmotionFilter] = useState('all'); //ControlMenu option 선택 시 해당 일기 보여주는 기능 구현.\n  //diaryList를 최신 순으로 정렬하는 함수 getProcessedDiaryList 구현.\n  //배열 diaryList prop 깊은 복사!\n  //diaryList.sort()를 사용하면 기존 배열 자체가 변경되기 때문에\n  // 깊은 복사를 한 후 JSON.parse(JSON.stringify())함수를 사용해 데이터를 붙여 넣어 주고 copyList에 대입한다.\n\n  const getProcessedDiaryList = () => {\n    const emotionFilterCallback = item => {\n      if (emotionFilter === 'good') {\n        return parseInt(item.emotion) <= 3;\n      } else {\n        return parseInt(item.emotion) > 3;\n      }\n    };\n\n    const compare = (a, b) => {\n      if (sortType === 'latest') {\n        return parseInt(b.date) - parseInt(a.date);\n      } else {\n        return parseInt(a.date) - parseInt(b.date);\n      }\n    };\n\n    const copyList = JSON.parse(JSON.stringify(diaryList));\n    const emotionFilteredList = emotionFilter === 'all' ? copyList : copyList.filter(it => emotionFilterCallback(it));\n    const sortedList = emotionFilteredList.sort(compare);\n    return sortedList;\n  };\n\n  return (\n    /*#__PURE__*/\n    // controlMenu의 value prop역할은 정렬기준이 되는 sortType을 변화시키는 select의 역할을 하기때문에 value에 sortType을 내려준다.\n    // onChange prop의 역할은 select가 변화 되었을 때 수행되어야 하므로 setSortType을 내려준다.\n    // optionList prop의 역할은 어떤 일기인지 option을 보여주는 것이므로 일기 종류를 배열로 담고있는 sortOptionList를 내려준다.\n    _jsxDEV(\"div\", {\n      className: \"DiaryList\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"menu_wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(ControlMenu, {\n            value: sortType,\n            onChange: setSortType,\n            optionList: sortOptionList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(ControlMenu, {\n            value: emotionFilter,\n            onChange: setEmotionFilter,\n            optionList: emotionFilterOptionList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: 'positive',\n            text: '새로운 일기',\n            onClick: () => navigate('/new')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }, this), getProcessedDiaryList().map(it => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [it.content, it.emotion, console.log(it.emotion)]\n      }, it.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(DiaryList, \"BdXNCrpqULkONH4/dXHjlvrEvso=\", false, function () {\n  return [useNavigate];\n});\n\n_c2 = DiaryList;\nDiaryList.defaultProps = {\n  diaryList: []\n};\nexport default DiaryList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ControlMenu\");\n$RefreshReg$(_c2, \"DiaryList\");","map":{"version":3,"sources":["/Users/skylar/study/React/emotion_diary/src/components/DiaryList.jsx"],"names":["React","useState","useNavigate","Button","sortOptionList","value","name","emotionFilterOptionList","ControlMenu","onChange","optionList","e","target","map","it","idx","DiaryList","diaryList","navigate","sortType","setSortType","emotionFilter","setEmotionFilter","getProcessedDiaryList","emotionFilterCallback","item","parseInt","emotion","compare","a","b","date","copyList","JSON","parse","stringify","emotionFilteredList","filter","sortedList","sort","content","console","log","id","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport Button from './Button'\n\nconst sortOptionList = [\n  { value: 'latest', name: '최신 일기' },\n  { value: 'oldest', name: '오랜 일기' },\n]\n\nconst emotionFilterOptionList = [\n  { value: 'all', name: '모든 감정' },\n  { value: 'good', name: '좋은 감정' },\n  { value: 'bad', name: '나쁜 감정' },\n]\n\nconst ControlMenu = ({ value, onChange, optionList }) => {\n  //value prop: ControlMenu가 렌더링 하는 select가 어떤 것을 선택하고 있는지 알려주는 역할.\n  //onChange prop: select가 변경되었을 때 바꿀 기능을 하는 함수.\n  //optionList prop: select 태그 안의 options.\n  return (\n    <select className=\"ControlMenu\" value={value} onChange={(e) => onChange(e.target.value)}>\n      {optionList.map((it, idx) => (\n        <option key={idx} value={it.value}>\n          {it.name}\n        </option>\n      ))}\n    </select>\n  )\n}\n\n//diaryList prop은 Home.jsx에서 useContext로 받아 온 data를 대입해준 것.\nconst DiaryList = ({ diaryList }) => {\n  const navigate = useNavigate()\n  //정렬 기준이 되는 state\n  const [sortType, setSortType] = useState('latest')\n  const [emotionFilter, setEmotionFilter] = useState('all')\n\n  //ControlMenu option 선택 시 해당 일기 보여주는 기능 구현.\n  //diaryList를 최신 순으로 정렬하는 함수 getProcessedDiaryList 구현.\n  //배열 diaryList prop 깊은 복사!\n  //diaryList.sort()를 사용하면 기존 배열 자체가 변경되기 때문에\n  // 깊은 복사를 한 후 JSON.parse(JSON.stringify())함수를 사용해 데이터를 붙여 넣어 주고 copyList에 대입한다.\n  const getProcessedDiaryList = () => {\n    const emotionFilterCallback = (item) => {\n      if (emotionFilter === 'good') {\n        return parseInt(item.emotion) <= 3\n      } else {\n        return parseInt(item.emotion) > 3\n      }\n    }\n\n    const compare = (a, b) => {\n      if (sortType === 'latest') {\n        return parseInt(b.date) - parseInt(a.date)\n      } else {\n        return parseInt(a.date) - parseInt(b.date)\n      }\n    }\n\n    const copyList = JSON.parse(JSON.stringify(diaryList))\n\n    const emotionFilteredList = emotionFilter === 'all' ? copyList : copyList.filter((it) => emotionFilterCallback(it))\n    const sortedList = emotionFilteredList.sort(compare)\n    return sortedList\n  }\n\n  return (\n    // controlMenu의 value prop역할은 정렬기준이 되는 sortType을 변화시키는 select의 역할을 하기때문에 value에 sortType을 내려준다.\n    // onChange prop의 역할은 select가 변화 되었을 때 수행되어야 하므로 setSortType을 내려준다.\n    // optionList prop의 역할은 어떤 일기인지 option을 보여주는 것이므로 일기 종류를 배열로 담고있는 sortOptionList를 내려준다.\n    <div className=\"DiaryList\">\n      <div className=\"menu_wrapper\">\n        <div>\n          <ControlMenu value={sortType} onChange={setSortType} optionList={sortOptionList} />\n          <ControlMenu value={emotionFilter} onChange={setEmotionFilter} optionList={emotionFilterOptionList} />\n        </div>\n        <div>\n          <Button type={'positive'} text={'새로운 일기'} onClick={() => navigate('/new')} />\n        </div>\n      </div>\n\n      {getProcessedDiaryList().map((it) => (\n        <div key={it.id}>\n          {it.content}\n          {it.emotion}\n          {console.log(it.emotion)}\n        </div>\n      ))}\n    </div>\n  )\n}\n\nDiaryList.defaultProps = {\n  diaryList: [],\n}\nexport default DiaryList\n"]},"metadata":{},"sourceType":"module"}