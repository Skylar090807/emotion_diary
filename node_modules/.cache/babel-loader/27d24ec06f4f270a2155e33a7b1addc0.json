{"ast":null,"code":"var _jsxFileName = \"/Users/skylar/study/React/emotion_diary/src/components/DiaryList.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sortOptionList = [{\n  value: 'latest',\n  name: '최신 일기'\n}, {\n  value: 'oldest',\n  name: '오랜 일기'\n}];\n\nconst ControlMenu = _ref => {\n  let {\n    value,\n    onChange,\n    optionList\n  } = _ref;\n  //value prop: ControlMenu가 렌더링 하는 select가 어떤 것을 선택하고 있는지 알려주는 역할.\n  //onChange prop: select가 변경되었을 때 바꿀 기능을 하는 함수.\n  //optionList prop: select 태그 안의 options.\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    value: value,\n    onChange: e => onChange(e.target.value),\n    children: optionList.map((it, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: it.value,\n      children: it.name\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ControlMenu;\n\nconst DiaryList = _ref2 => {\n  _s();\n\n  let {\n    diaryList\n  } = _ref2;\n  //정렬 기준이 되는 state\n  const [sortType, setSortType] = useState('latest'); //ControlMenu option 선택 시 해당 일기 보여주는 기능 구현.\n  //diaryList.sort()를 사용하면 기존 배열 자체가 변경되기 때문에\n  // 깊은 복사를 한 후 JSON.parse(JSON.stringify())함수를 사용해 데이터를 붙여 넣어 준다.\n\n  const getProcessedDiaryList = () => {\n    const copyList = JSON.parse(JSON.stringify(diaryList));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ControlMenu, {\n      value: sortType,\n      onChange: setSortType,\n      optionList: sortOptionList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), diaryList.map(it => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: it.content\n    }, it.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DiaryList, \"r7g91DDq+2vAPeXEapT4nb61jPA=\");\n\n_c2 = DiaryList;\nDiaryList.defaultProps = {\n  diaryList: []\n};\nexport default DiaryList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ControlMenu\");\n$RefreshReg$(_c2, \"DiaryList\");","map":{"version":3,"sources":["/Users/skylar/study/React/emotion_diary/src/components/DiaryList.jsx"],"names":["React","useState","sortOptionList","value","name","ControlMenu","onChange","optionList","e","target","map","it","idx","DiaryList","diaryList","sortType","setSortType","getProcessedDiaryList","copyList","JSON","parse","stringify","content","id","defaultProps"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,cAAc,GAAG,CACrB;AAAEC,EAAAA,KAAK,EAAE,QAAT;AAAmBC,EAAAA,IAAI,EAAE;AAAzB,CADqB,EAErB;AAAED,EAAAA,KAAK,EAAE,QAAT;AAAmBC,EAAAA,IAAI,EAAE;AAAzB,CAFqB,CAAvB;;AAKA,MAAMC,WAAW,GAAG,QAAqC;AAAA,MAApC;AAAEF,IAAAA,KAAF;AAASG,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,GAAoC;AACvD;AACA;AACA;AACA,sBACE;AAAQ,IAAA,KAAK,EAAEJ,KAAf;AAAsB,IAAA,QAAQ,EAAGK,CAAD,IAAOF,QAAQ,CAACE,CAAC,CAACC,MAAF,CAASN,KAAV,CAA/C;AAAA,cACGI,UAAU,CAACG,GAAX,CAAe,CAACC,EAAD,EAAKC,GAAL,kBACd;AAAkB,MAAA,KAAK,EAAED,EAAE,CAACR,KAA5B;AAAA,gBACGQ,EAAE,CAACP;AADN,OAAaQ,GAAb;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAbD;;KAAMP,W;;AAeN,MAAMQ,SAAS,GAAG,SAAmB;AAAA;;AAAA,MAAlB;AAAEC,IAAAA;AAAF,GAAkB;AACnC;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,QAAD,CAAxC,CAFmC,CAInC;AACA;AACA;;AACA,QAAMgB,qBAAqB,GAAG,MAAM;AAClC,UAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeP,SAAf,CAAX,CAAjB;AACD,GAFD;;AAIA,sBACE;AAAA,4BAIE,QAAC,WAAD;AAAa,MAAA,KAAK,EAAEC,QAApB;AAA8B,MAAA,QAAQ,EAAEC,WAAxC;AAAqD,MAAA,UAAU,EAAEd;AAAjE;AAAA;AAAA;AAAA;AAAA,YAJF,EAKGY,SAAS,CAACJ,GAAV,CAAeC,EAAD,iBACb;AAAA,gBAAkBA,EAAE,CAACW;AAArB,OAAUX,EAAE,CAACY,EAAb;AAAA;AAAA;AAAA;AAAA,YADD,CALH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAtBD;;GAAMV,S;;MAAAA,S;AAwBNA,SAAS,CAACW,YAAV,GAAyB;AACvBV,EAAAA,SAAS,EAAE;AADY,CAAzB;AAGA,eAAeD,SAAf","sourcesContent":["import React from 'react'\nimport { useState } from 'react'\n\nconst sortOptionList = [\n  { value: 'latest', name: '최신 일기' },\n  { value: 'oldest', name: '오랜 일기' },\n]\n\nconst ControlMenu = ({ value, onChange, optionList }) => {\n  //value prop: ControlMenu가 렌더링 하는 select가 어떤 것을 선택하고 있는지 알려주는 역할.\n  //onChange prop: select가 변경되었을 때 바꿀 기능을 하는 함수.\n  //optionList prop: select 태그 안의 options.\n  return (\n    <select value={value} onChange={(e) => onChange(e.target.value)}>\n      {optionList.map((it, idx) => (\n        <option key={idx} value={it.value}>\n          {it.name}\n        </option>\n      ))}\n    </select>\n  )\n}\n\nconst DiaryList = ({ diaryList }) => {\n  //정렬 기준이 되는 state\n  const [sortType, setSortType] = useState('latest')\n\n  //ControlMenu option 선택 시 해당 일기 보여주는 기능 구현.\n  //diaryList.sort()를 사용하면 기존 배열 자체가 변경되기 때문에\n  // 깊은 복사를 한 후 JSON.parse(JSON.stringify())함수를 사용해 데이터를 붙여 넣어 준다.\n  const getProcessedDiaryList = () => {\n    const copyList = JSON.parse(JSON.stringify(diaryList))\n  }\n\n  return (\n    <div>\n      {/* controlMenu의 value prop역할은 정렬기준이 되는 sortType을 변화시키는 select의 역할을 하기때문에 value에 sortType을 내려준다. */}\n      {/* onChange prop의 역할은 select가 변화 되었을 때 수행되어야 하므로 setSortType을 내려준다. */}\n      {/* optionList prop의 역할은 어떤 일기인지 option을 보여주는 것이므로 일기 종류를 배열로 담고있는 sortOptionList를 내려준다. */}\n      <ControlMenu value={sortType} onChange={setSortType} optionList={sortOptionList} />\n      {diaryList.map((it) => (\n        <div key={it.id}>{it.content}</div>\n      ))}\n    </div>\n  )\n}\n\nDiaryList.defaultProps = {\n  diaryList: [],\n}\nexport default DiaryList\n"]},"metadata":{},"sourceType":"module"}