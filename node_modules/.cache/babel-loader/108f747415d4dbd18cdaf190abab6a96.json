{"ast":null,"code":"var _jsxFileName = \"/Users/skylar/study/React/emotion_diary/src/pages/Edit.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { DiaryStateContext } from '../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Edit = () => {\n  _s();\n\n  //Page Moving useNavigate()\n  const navigate = useNavigate();\n  const {\n    id\n  } = useParams();\n  console.log(id);\n  const diaryList = useContext(DiaryStateContext);\n  console.log(diaryList); // id를 기준으로 해당 id에 맞는 diaryList의 data를 꺼내온다.\n  // useEffect를 사용해 Edit component가 mount 됐을 때 수행하도록 한다.\n\n  useEffect(() => {\n    if (diaryList.length >= 1) {\n      const targetDiary = diaryList.find( //\n      it => Number(it.id) === parseInt(id));\n      console.log(targetDiary);\n    }\n  }, [id, diaryList]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Edit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Edit, \"pPACAWDKwzBqlzac5qw8UMrXL4U=\", false, function () {\n  return [useNavigate, useParams];\n});\n\n_c = Edit;\nexport default Edit;\n\nvar _c;\n\n$RefreshReg$(_c, \"Edit\");","map":{"version":3,"sources":["/Users/skylar/study/React/emotion_diary/src/pages/Edit.jsx"],"names":["React","useContext","useEffect","useNavigate","useParams","DiaryStateContext","Edit","navigate","id","console","log","diaryList","length","targetDiary","find","it","Number","parseInt"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,kBAAvC;AACA,SAASC,iBAAT,QAAkC,QAAlC;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB;AACA,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AAEA,QAAM;AAAEK,IAAAA;AAAF,MAASJ,SAAS,EAAxB;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AAEA,QAAMG,SAAS,GAAGV,UAAU,CAACI,iBAAD,CAA5B;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ,EARiB,CAUjB;AACA;;AACAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,SAAS,CAACC,MAAV,IAAoB,CAAxB,EAA2B;AACzB,YAAMC,WAAW,GAAGF,SAAS,CAACG,IAAV,EAClB;AACCC,MAAAA,EAAD,IAAQC,MAAM,CAACD,EAAE,CAACP,EAAJ,CAAN,KAAkBS,QAAQ,CAACT,EAAD,CAFhB,CAApB;AAIAC,MAAAA,OAAO,CAACC,GAAR,CAAYG,WAAZ;AACD;AACF,GARQ,EAQN,CAACL,EAAD,EAAKG,SAAL,CARM,CAAT;AAUA,sBACE;AAAA,2BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA3BD;;GAAML,I;UAEaH,W,EAEFC,S;;;KAJXE,I;AA6BN,eAAeA,IAAf","sourcesContent":["import React, { useContext, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport { DiaryStateContext } from '../App'\n\nconst Edit = () => {\n  //Page Moving useNavigate()\n  const navigate = useNavigate()\n\n  const { id } = useParams()\n  console.log(id)\n\n  const diaryList = useContext(DiaryStateContext)\n  console.log(diaryList)\n\n  // id를 기준으로 해당 id에 맞는 diaryList의 data를 꺼내온다.\n  // useEffect를 사용해 Edit component가 mount 됐을 때 수행하도록 한다.\n  useEffect(() => {\n    if (diaryList.length >= 1) {\n      const targetDiary = diaryList.find(\n        //\n        (it) => Number(it.id) === parseInt(id),\n      )\n      console.log(targetDiary)\n    }\n  }, [id, diaryList])\n\n  return (\n    <div>\n      <h2>Edit</h2>\n    </div>\n  )\n}\n\nexport default Edit\n"]},"metadata":{},"sourceType":"module"}